{
  "version": 3,
  "sources": ["../lib/mskmin.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} minimum value\n*\n* @example\n* var x = [ 1.0, -2.0, -4.0, 2.0 ];\n* var mask = [ 0, 0, 1, 0 ];\n*\n* var v = mskmin( x.length, x, 1, mask, 1 );\n* // returns -2.0\n*/\nfunction mskmin( N, x, strideX, mask, strideMask ) {\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = x[ ix ];\n\tif ( isnan( min ) ) {\n\t\treturn min;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskmin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} minimum value\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, -5.0, -6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mskmin( N, x, 2, 1, mask, 2, 1 );\n* // returns -2.0\n*/\nfunction mskmin( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = x[ ix ];\n\tif ( isnan( min ) ) {\n\t\treturn min;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskmin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar mskmin = require( './mskmin.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( mskmin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = mskmin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of a strided array according to a mask.\n*\n* @module @stdlib/stats-base-mskmin\n*\n* @example\n* var mskmin = require( '@stdlib/stats-base-mskmin' );\n*\n* var x = [ 1.0, -2.0, -4.0, 2.0 ];\n* var mask = [ 0, 0, 1, 0 ];\n*\n* var v = mskmin( x.length, x, 1 );\n* // returns -2.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var mskmin = require( '@stdlib/stats-base-mskmin' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, -5.0, -6.0 ];\n* var mask = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mskmin.ndarray( N, x, 2, 1, mask, 2, 1 );\n* // returns -2.0\n*/\n\n// MODULES //\n\nvar mskmin = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = mskmin;\n\n// exports: { \"ndarray\": \"mskmin.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAiB,QAAS,2CAA4C,EAsB1E,SAASC,EAAQC,EAAGC,EAAGC,EAASC,EAAMC,EAAa,CAClD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,MAAO,KAYR,IAVKE,EAAU,EACdI,GAAM,EAAEN,GAAKE,EAEbI,EAAK,EAEDF,EAAa,EACjBG,GAAM,EAAEP,GAAKI,EAEbG,EAAK,EAEAE,EAAI,EAAGA,EAAIT,GACXG,EAAMI,CAAG,IAAM,EADDE,IAInBH,GAAMJ,EACNK,GAAMH,EAEP,GAAKK,IAAMT,EACV,MAAO,KAGR,GADAK,EAAMJ,EAAGK,CAAG,EACPT,EAAOQ,CAAI,EACf,OAAOA,EAGR,IADAI,GAAK,EACCA,EAAGA,EAAIT,EAAGS,IAGf,GAFAH,GAAMJ,EACNK,GAAMH,EACD,CAAAD,EAAMI,CAAG,EAId,IADAC,EAAIP,EAAGK,CAAG,EACLT,EAAOW,CAAE,EACb,OAAOA,GAEHA,EAAIH,GAASG,IAAMH,GAAOP,EAAgBU,CAAE,KAChDH,EAAMG,GAGR,OAAOH,CACR,CAKAT,EAAO,QAAUG,ICpGjB,IAAAW,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAiB,QAAS,2CAA4C,EA2B1E,SAASC,EAAQC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,EAAa,CACvE,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,MAAO,KAIR,IAFAQ,EAAKL,EACLM,EAAKH,EACCK,EAAI,EAAGA,EAAIX,GACXI,EAAMK,CAAG,IAAM,EADDE,IAInBH,GAAMN,EACNO,GAAMJ,EAEP,GAAKM,IAAMX,EACV,MAAO,KAGR,GADAO,EAAMN,EAAGO,CAAG,EACPX,EAAOU,CAAI,EACf,OAAOA,EAGR,IADAI,GAAK,EACCA,EAAGA,EAAIX,EAAGW,IAGf,GAFAH,GAAMN,EACNO,GAAMJ,EACD,CAAAD,EAAMK,CAAG,EAId,IADAC,EAAIT,EAAGO,CAAG,EACLX,EAAOa,CAAE,EACb,OAAOA,GAEHA,EAAIH,GAASG,IAAMH,GAAOT,EAAgBY,CAAE,KAChDH,EAAMG,GAGR,OAAOH,CACR,CAKAX,EAAO,QAAUG,ICjGjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICcjB,IAAIE,EAAS,IAKb,OAAO,QAAUA",
  "names": ["require_mskmin", "__commonJSMin", "exports", "module", "isnan", "isNegativeZero", "mskmin", "N", "x", "strideX", "mask", "strideMask", "min", "ix", "im", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnan", "isNegativeZero", "mskmin", "N", "x", "strideX", "offsetX", "mask", "strideMask", "offsetMask", "min", "ix", "im", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "mskmin", "ndarray", "mskmin"]
}
